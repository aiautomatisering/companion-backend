generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum SubscriptionStatus {
  ACTIVE
  CANCELED
  TRIAL
  PAST_DUE
  INCOMPLETE
  EXPIRED
}

enum AllowedRoles {
  ADMIN
  USER
}

enum InvoiceStatus {
  PAID
  PENDING
  FAILED
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

// User Model
model User {
  id               String        @id @default(uuid())
  email            String        @unique()
  password         String
  firstName        String        @map("first_name") @db.VarChar(60)
  lastName         String        @map("last_name") @db.VarChar(60)
  stripeCustomerId String?       @unique() @map("stripe_customer_id")
  subscription     Subscription?
  invoices         Invoice[]
  roles            UserRole[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("users")
}

// Role Management
model Role {
  id        String       @id @default(uuid())
  name      AllowedRoles @unique()
  users     UserRole[]
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime     @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("roles")
}

model UserRole {
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Subscription Model
model Subscription {
  id          String             @id @default(uuid())
  userId      String             @unique() @map("user_id")
  planId      String             @map("plan_id")
  stripeSubId String?            @unique() @map("stripe_sub_id") // Stripe Subscription ID
  status      SubscriptionStatus @default(TRIAL)
  startDate   DateTime           @default(now()) @map("start_date") @db.Timestamptz(6)
  endDate     DateTime?          @map("end_date") @db.Timestamptz(6)
  canceledAt  DateTime?          @map("canceled_at") // If user cancels

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("subscriptions")
}

// Plan Model
model Plan {
  id        String          @id @default(uuid())
  name      String          @unique()
  priceId   String          @unique() @map("price_id")
  interval  BillingInterval
  amount    Int
  trialDays Int?            @map("trial_days")

  subscriptions Subscription[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("plans")
}

// Invoice Model
model Invoice {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  stripeInvoiceId String        @unique() @map("stripe_invoice_id")
  amount          Int
  currency        String        @map("currency")
  description     String
  status          InvoiceStatus @default(PENDING)
  paidAt          DateTime?     @map("paid_at") // If paid

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}
