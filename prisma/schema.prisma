// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AllowedRoles {
  ADMIN
  USER
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique()
  password  String
  firstName String     @map("first_name") @db.VarChar(60)
  lastName  String     @map("last_name") @db.VarChar(60)
  updatedAt DateTime   @default(now()) @map("updated_at") @db.Timestamptz(6)
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  roles     UserRole[]

  @@map("users")
}

model Role {
  id        String       @id @default(uuid())
  name      AllowedRoles @unique()
  users     UserRole[]
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime     @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("roles")
}

model UserRole {
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}
